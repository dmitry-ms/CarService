// <auto-generated />
using System;
using CarService.Data.EF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarService.Data.EF.Migrations
{
    [DbContext(typeof(CarServiceDbContext))]
    [Migration("20210726230047_add_services_and_orders")]
    partial class add_services_and_orders
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarService.Data.EF.Identity.CarServiceRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CarService.Data.EF.Identity.CarServiceUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.CarParameters.Parameters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parameters");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Parameters");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.Costs.BaseCosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarParametersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarParametersId");

                    b.ToTable("BaseCosts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseCosts");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostsId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("CarService.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CarService.Entities.Users.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("CarService.Entities.Users.ServiceManRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceManId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceManId");

                    b.ToTable("ServiceManRole");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.ClientCar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarPlate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MileageKM")
                        .HasColumnType("int");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VinNumber")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<DateTime>("YearProduction")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ClientCars");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Parts.Engines.Engine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnginePowerKW")
                        .HasColumnType("int");

                    b.Property<string>("NameEngine")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Engines");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Engine");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Parts.Transmissions.Transmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriveUnit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Transmissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transmission");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AirConditioning")
                        .HasColumnType("bit");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("EngineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("TransmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.HasIndex("TransmissionId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OrderService", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("OrderService");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.CarParameters.Engine.EngineParameters", b =>
                {
                    b.HasBaseType("CarService.Entities.CarsServices.CarParameters.Parameters");

                    b.Property<string>("EngineNames")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("EngineParameters");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.Costs.Costs", b =>
                {
                    b.HasBaseType("CarService.Entities.CarsServices.Costs.BaseCosts");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue("Costs");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.Costs.CostsByDriveUnit", b =>
                {
                    b.HasBaseType("CarService.Entities.CarsServices.Costs.BaseCosts");

                    b.Property<decimal>("PriceByFourWheelDrive")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceByFrontWheelDriveOrMono")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceByRearWheelDrive")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("TimeByFourWheelDrive")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeByFrontWheelDriveOrMono")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TimeByRearWheelDrive")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue("CostsByDriveUnit");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.Costs.CostsByOneCylinder", b =>
                {
                    b.HasBaseType("CarService.Entities.CarsServices.Costs.BaseCosts");

                    b.Property<decimal>("PriceByOneCylinder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("TimeByOneCylinder")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue("CostsByOneCylinder");
                });

            modelBuilder.Entity("CarService.Entities.Users.Client", b =>
                {
                    b.HasBaseType("CarService.Entities.Users.Person");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("CarService.Entities.Users.ServiceMan", b =>
                {
                    b.HasBaseType("CarService.Entities.Users.Person");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("ServiceMan");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Parts.Engines.DieselEngine", b =>
                {
                    b.HasBaseType("CarService.Entities.Vehicles.Parts.Engines.Engine");

                    b.Property<bool>("DEF")
                        .HasColumnType("bit");

                    b.Property<int>("EngineVolumeSquareCentimeter")
                        .HasColumnType("int");

                    b.Property<int>("NumberCylinders")
                        .HasColumnType("int");

                    b.Property<int>("NumberValves")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DieselEngine");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Parts.Engines.ElectricEngine", b =>
                {
                    b.HasBaseType("CarService.Entities.Vehicles.Parts.Engines.Engine");

                    b.Property<int>("BatteryCapacity")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ElectricEngine");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Parts.Engines.PetrolEngine", b =>
                {
                    b.HasBaseType("CarService.Entities.Vehicles.Parts.Engines.Engine");

                    b.Property<int>("EngineVolumeSquareCentimeter")
                        .HasColumnType("int")
                        .HasColumnName("PetrolEngine_EngineVolumeSquareCentimeter");

                    b.Property<int>("NumberCylinders")
                        .HasColumnType("int")
                        .HasColumnName("PetrolEngine_NumberCylinders");

                    b.Property<int>("NumberValves")
                        .HasColumnType("int")
                        .HasColumnName("PetrolEngine_NumberValves");

                    b.HasDiscriminator().HasValue("PetrolEngine");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Parts.Transmissions.AutomaticTransmission", b =>
                {
                    b.HasBaseType("CarService.Entities.Vehicles.Parts.Transmissions.Transmission");

                    b.Property<int>("NumberOfGears")
                        .HasColumnType("int")
                        .HasColumnName("AutomaticTransmission_NumberOfGears");

                    b.HasDiscriminator().HasValue("AutomaticTransmission");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Parts.Transmissions.MechanicTransmission", b =>
                {
                    b.HasBaseType("CarService.Entities.Vehicles.Parts.Transmissions.Transmission");

                    b.Property<int>("NumberOfGears")
                        .HasColumnType("int")
                        .HasColumnName("MechanicTransmission_NumberOfGears");

                    b.HasDiscriminator().HasValue("MechanicTransmission");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Parts.Transmissions.RoboticTransmission", b =>
                {
                    b.HasBaseType("CarService.Entities.Vehicles.Parts.Transmissions.Transmission");

                    b.Property<int>("NumberOfGears")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("RoboticTransmission");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Parts.Transmissions.VariatorTransmission", b =>
                {
                    b.HasBaseType("CarService.Entities.Vehicles.Parts.Transmissions.Transmission");

                    b.HasDiscriminator().HasValue("VariatorTransmission");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.CarParameters.Engine.ElectricEngineParameters", b =>
                {
                    b.HasBaseType("CarService.Entities.CarsServices.CarParameters.Engine.EngineParameters");

                    b.Property<int?>("MaxBatteryCapacity")
                        .HasColumnType("int");

                    b.Property<int?>("MinBatteryCapacity")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ElectricEngineParameters");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.CarParameters.Engine.ICEngineParameters", b =>
                {
                    b.HasBaseType("CarService.Entities.CarsServices.CarParameters.Engine.EngineParameters");

                    b.Property<int?>("MaxEngineVolume")
                        .HasColumnType("int");

                    b.Property<int?>("MaxNumberCylinders")
                        .HasColumnType("int");

                    b.Property<int?>("MaxNumberValves")
                        .HasColumnType("int");

                    b.Property<int?>("MinEngineVolume")
                        .HasColumnType("int");

                    b.Property<int?>("MinNumberCylinders")
                        .HasColumnType("int");

                    b.Property<int?>("MinNumberValves")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ICEngineParameters");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.CarParameters.Engine.DieselEngineParameters", b =>
                {
                    b.HasBaseType("CarService.Entities.CarsServices.CarParameters.Engine.ICEngineParameters");

                    b.Property<bool?>("DEF")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("DieselEngineParameters");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.CarParameters.Engine.PetrolEngineParameters", b =>
                {
                    b.HasBaseType("CarService.Entities.CarsServices.CarParameters.Engine.ICEngineParameters");

                    b.HasDiscriminator().HasValue("PetrolEngineParameters");
                });

            modelBuilder.Entity("CarService.Data.EF.Identity.CarServiceUser", b =>
                {
                    b.HasOne("CarService.Entities.Users.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.Costs.BaseCosts", b =>
                {
                    b.HasOne("CarService.Entities.CarsServices.CarParameters.Parameters", "CarParameters")
                        .WithMany()
                        .HasForeignKey("CarParametersId");

                    b.Navigation("CarParameters");
                });

            modelBuilder.Entity("CarService.Entities.CarsServices.Service", b =>
                {
                    b.HasOne("CarService.Entities.CarsServices.Costs.BaseCosts", "Costs")
                        .WithMany()
                        .HasForeignKey("CostsId");

                    b.Navigation("Costs");
                });

            modelBuilder.Entity("CarService.Entities.Orders.Order", b =>
                {
                    b.HasOne("CarService.Entities.Vehicles.ClientCar", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarService.Entities.Users.ServiceManRole", b =>
                {
                    b.HasOne("CarService.Entities.Users.ServiceMan", "ServiceMan")
                        .WithMany("_roles")
                        .HasForeignKey("ServiceManId");

                    b.Navigation("ServiceMan");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.ClientCar", b =>
                {
                    b.HasOne("CarService.Entities.Users.Client", "Client")
                        .WithMany("ClientCars")
                        .HasForeignKey("ClientId");

                    b.HasOne("CarService.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Client");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarService.Entities.Vehicles.Vehicle", b =>
                {
                    b.HasOne("CarService.Entities.Vehicles.Parts.Engines.Engine", "Engine")
                        .WithMany()
                        .HasForeignKey("EngineId");

                    b.HasOne("CarService.Entities.Vehicles.Parts.Transmissions.Transmission", "Transmission")
                        .WithMany()
                        .HasForeignKey("TransmissionId");

                    b.Navigation("Engine");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CarService.Data.EF.Identity.CarServiceRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarService.Data.EF.Identity.CarServiceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarService.Data.EF.Identity.CarServiceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CarService.Data.EF.Identity.CarServiceRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.Data.EF.Identity.CarServiceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarService.Data.EF.Identity.CarServiceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderService", b =>
                {
                    b.HasOne("CarService.Entities.Orders.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.Entities.CarsServices.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarService.Entities.Users.Client", b =>
                {
                    b.Navigation("ClientCars");
                });

            modelBuilder.Entity("CarService.Entities.Users.ServiceMan", b =>
                {
                    b.Navigation("_roles");
                });
#pragma warning restore 612, 618
        }
    }
}
